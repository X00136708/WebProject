{"version":3,"file":"static\\development\\pages\\news.js","sources":["webpack:///webpack/bootstrap","webpack:///./components/Dropdown.js","webpack:///./components/SearchForm.js","webpack:///./pages/news.js","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"isomorphic-unfetch\"","webpack:///external \"next/link\"","webpack:///external \"react\"","webpack:///external \"styled-jsx/style\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import React, { Component } from 'react';\r\n//import '../styles/dropdown.css';\r\n\r\n/* Myself and Michael Brady were working on this, he did most of this page. Just thought i'd tell you incase you thought i was copying from him. We both worked together in labs */\r\n\r\nclass Dropdown extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            visible: this.props.visible,\r\n            options: this.props.options,\r\n            selected: this.props.selected\r\n        };\r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n\r\n    render() {\r\n        const jsxStyle= <style jsx>{`\r\n            .list {\r\n                list-style-type: none;\r\n                width: 22.5%;\r\n                margin-left: 19em;\r\n                padding: 1em;\r\n                \r\n                \r\n            }\r\n            .ref {\r\n                background-color: #f2ddff;\r\n                border: 1px solid black;\r\n                text-align: center;\r\n                font-size: 18px;\r\n                border-radius: 1em;\r\n                \r\n            }\r\n            .ref:hover {\r\n                background-color: gray;\r\n            }\r\n            #head {\r\n                border-radius: 1em;\r\n                font-size: 22px;\r\n                background-color:purple;\r\n            }\r\n        `}</style>\r\n        const head = (<li id=\"head\" class=\"ref\" onClick={this.toggle} key={this.state.options.ref}>{this.state.options[this.state.selected].text}</li>);\r\n        const body = (this.state.options.map((option) => <li class=\"ref\" onClick={() => this.menuRefresh(option)}>{option.text}</li>));\r\n        if(!this.state.visible)\r\n            return (<div class=\"list\">{head}{jsxStyle}</div>);\r\n        else {\r\n            return (<div class=\"list\">{head}{body}{jsxStyle}</div>);\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            visible: this.state.visible = !this.state.visible,\r\n            options: this.state.options,\r\n            numOptions: this.state.numOptions\r\n        })\r\n    }\r\n\r\n\r\n    changeHeader(option) {\r\n        for(let i = 0; i < this.state.options.length; i++) {\r\n            if(this.state.options[i].ref === option.ref) {\r\n                this.setState({\r\n                    selected: i\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n   \r\n    menuRefresh(option) {\r\n        this.changeHeader(option);\r\n        this.props.setNewsSource(option.ref);\r\n    }\r\n\r\n    addref(ref, text) {\r\n        this.setState({\r\n            visible: this.visible,\r\n            options: this.state.options.push({\"ref\": ref, \"text\": text}),\r\n            numOptions: this.state.numOptions\r\n        }\r\n    )\r\n    }\r\n}\r\n\r\nexport default Dropdown;","// Import Dependencies\r\nimport React, { Component } from \"react\";\r\n\r\n//\r\n// Define SearchForm Class\r\n//\r\nexport default class SearchForm extends Component {\r\n  // constructor accepts props and initialises state\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  //\r\n  // an event handler for form submit\r\n  //\r\n  formSubmitted = event => {\r\n    // Validate input value\r\n    if (event.target.newsSource.value != \"\") {\r\n      // setNewsSource is a function passed from parent (news page) via props\r\n      // It is used as a way to pass the input value back up to the parent\r\n      // This is called state lifting\r\n      // see: https://reactjs.org/docs/lifting-state-up.html\r\n      this.props.setNewsSource(event.target.newsSource.value);\r\n    }\r\n    // prevent page reload (prevent submit)\r\n    event.preventDefault();\r\n  };\r\n\r\n  // Render the form\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* Search Input */}\r\n        <div id=\"search\">\r\n          <h3>Enter a news source</h3>\r\n          {/* Note event handler */}\r\n          <form onSubmit={this.formSubmitted}>\r\n            {/* The input field */}\r\n            <input\r\n              name=\"newsSource\"\r\n              placeholder=\"e.g: the-irish-times\"\r\n              type=\"text\"\r\n            />\r\n            {/* Button click will trigger submit */}\r\n            <button>Get News</button>\r\n          </form>\r\n          <style jsx >{`\r\n      #search {\r\n       margin-left:23.4em;\r\n      }\r\n      #search h3{\r\n        margin-left: 1.8em;\r\n      }\r\n      \r\n      \r\n  `}</style>\r\n        </div>\r\n      </div>\r\n    );\r\n   \r\n  }\r\n  \r\n}\r\n","// Passing from child to parent\r\n// https://www.robinwieruch.de/react-pass-props-to-component/#react-props\r\n\r\n//\r\n// Imports\r\n//\r\n\r\n// This is the Link API\r\nimport Dropdown from '../components/Dropdown'\r\nimport Link from 'next/link';\r\n// Import fetch library\r\nimport fetch from 'isomorphic-unfetch';\r\n// mport SearchForm Component\r\nimport SearchForm from '../components/SearchForm';\r\n\r\n\r\n//(free version) API key from  https://newsapi.org/\r\n// Get your own key!\r\nconst apiKey = '3780066b33ef41b9b4b7e957994e9c38';\r\n\r\n// Initial News source\r\nconst defaultNewsSource = 'the-irish-times';\r\n\r\n//\r\n// async method fetches and returns data from a url\r\n//\r\nasync function getNews(url) {\r\n\r\n  // try fetch and catch any errors\r\n  try {\r\n    // Make async call\r\n    const res = await fetch(url);\r\n    // get json data when it arrives\r\n    const data = await res.json();\r\n    // return json data\r\n    return (data);\r\n  } catch (error) {\r\n    // return error if it occurs\r\n    return (error);\r\n  }\r\n}\r\n\r\n//\r\n//  The News page defined as an ES6 Class\r\n//\r\nexport default class News extends React.Component {\r\n\r\n  // Constructor\r\n  // Recieve props and initialise state properties\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      newsSource: \"\",\r\n      url: \"\",\r\n      articles: [],\r\n\t    index: 0\r\n    }\r\n  }\r\n  // This function is passed to the SearchForm and used the get the value entered\r\n  // This value will be used to generate the api url\r\n  setNewsSource = (input) => {\r\n    this.setState({\r\n      newsSource: input,\r\n      url: `https://newsapi.org/v2/top-headlines?sources=${input}&apiKey=${apiKey}`\r\n    })\r\n  }\r\n\r\n  // Get all articles by searching for keyword(s)\r\n  // https://newsapi.org/docs/endpoints/\r\n  //\r\n  searchNewsAPI = (event) => {\r\n    // set state values - this will trigger an update and componentDidUpdate\r\n    this.setState({\r\n      // Get the link text\r\n      newsSource: `${event.target.innerText}`,\r\n      // Build the search URL using the link name\r\n      url: `https://newsapi.org/v2/${event.target.name}&apiKey=${apiKey}`\r\n    })\r\n    console.log(this.state.url);\r\n  }\r\n  \r\n\tupdateID(index){\r\n    console.log(\"hi\")\r\n    this.setState({index}); /*I thought this would set the state and it could be retrieved on the articles page. I tried a lot */\r\n    \r\n\t}\r\n  //\r\n  // render() method generates the page\r\n  //\r\n  render() {\r\n\r\n    // if state.articles is empty copy props to it\r\n    if (this.state.articles.length == 0) {\r\n      this.state.articles = this.props.articles;\r\n    }\r\n    return (\r\n      <div>\r\n        <Dropdown setNewsSource={this.setNewsSource} selected={0} options=\r\n        {            \r\n            [ {\"ref\": \"die-zeit\", \"text\": \"Die Zeit\"},\r\n              {\"ref\": \"hacker-news\", \"text\": \"Hacker News\"},\r\n              {\"ref\": \"infobae\", \"text\": \"Infobae\"},\r\n              {\"ref\": \"les-echos\", \"text\": \"Les Echos\"}]\r\n        } > \r\n        </Dropdown>\r\n        { /* Add the SearchForm component */}\r\n        { /* Pass the setNewsSource function as a prop with the same name*/}\r\n        <SearchForm setNewsSource={this.setNewsSource}/>\r\n\r\n        { /* Example search links - note using name attribute for parameters(!!) */}\r\n        <ul className=\"newsMenu\">\r\n          <li><a href=\"#\" onClick={this.searchNewsAPI} name=\"top-headlines?sources=abc-news\">ABC News</a></li>\r\n          <li><a href=\"#\" onClick={this.searchNewsAPI} name=\"top-headlines?sources=cbc-news\">CBC News</a></li>\r\n          <li><a href=\"#\" onClick={this.searchNewsAPI} name=\"top-headlines?sources=fox-news\">Fox News</a></li>\r\n          <li><a href=\"#\" onClick={this.searchNewsAPI} name=\"top-headlines?sources=bbc-news\">BBC News</a></li>\r\n        </ul>\r\n        { /* Display a title based on source */}\r\n        <h3>{this.state.newsSource.split(\"-\").join(\" \")}</h3>\r\n        <div>\r\n          { /* Iterate through articles using Array map) */}\r\n          { /* Display author, publishedAt, image, description, and content */}\r\n          { /* for each story. Also a link for more.. */}\r\n          { /* the map index property gives the position in the array for each article - see the link below */}\r\n          {this.state.articles.map((article, index) => (\r\n            <section key={index}>\r\n\t\t\t\t\r\n              <h3>{article.title}</h3>\r\n              <p className=\"author\">{article.author} {Date(article.publishedAt)}</p>\r\n              <img src={article.urlToImage} alt=\"article image\" className=\"img-article\"></img>\r\n              <p>{article.description}</p>\r\n              <p>{article.content}</p>\r\n              { /* adding the index value as a paramater to be passed with a request for the single article page*/}\r\n             \r\n              <p><Link as={`/article/${index}`} onClick={`updateID(${index})`} href={`/article?id=${index}`}><a>Read More</a></Link></p>\r\n\t\t\t\r\n            </section>\r\n          ))}\r\n        </div>\r\n\r\n        <style jsx>{`\r\n              /* CSS for this page */\r\n              section {\r\n                width: 50%;\r\n                border: 1px solid red;\r\n                background-color: #f2ddff;\r\n                padding: 1em;\r\n                padding-top: 0em;\r\n                margin-left: 5em;\r\n                \r\n              }\r\n              \r\n              section h3{\r\n                color: blue;\r\n                text-decoration: bold;\r\n                \r\n              }\r\n\r\n            .author {\r\n                font-style: italic;\r\n                font-size: 0.8em;\r\n              }\r\n            .img-article {\r\n                max-width: 90%;\r\n              }\r\n\r\n            .newsMenu {\r\n              display: flex;\r\n              flex-direction: row;\r\n              margin-left: 5em;\r\n              margin-right: 42em;\r\n              padding: 0;\r\n              margin-top: 20px;\r\n              \r\n\r\n            }\r\n            .newsMenu li {\r\n              display: inline-table;\r\n              margin-left: 6em;\r\n              font-weight: bold;\r\n            }\r\n\r\n            .newsMenu li a {\r\n              font-size: 1em;\r\n              color: red;\r\n              display: block;\r\n              text-decoration: none;\r\n            }\r\n\r\n            .newsMenu li a:hover {\r\n              color: black;\r\n              text-decoration: underline;\r\n            }\r\n           \r\n          `}</style>\r\n      </div>\r\n    );\r\n    \r\n  }\r\n\r\n  //\r\n  // Get initial data on server side using an AJAX call\r\n  // This will initialise the 'props' for the News page\r\n  //    \r\n  static async getInitialProps(response) {\r\n\r\n    // Build the url which will be used to get the data\r\n    // See https://newsapi.org/s/the-irish-times-api\r\n    const defaultUrl = `https://newsapi.org/v2/top-headlines?sources=${defaultNewsSource}&apiKey=${apiKey}`;\r\n\r\n    // Get news data from the api url\r\n    const data = await getNews(defaultUrl);\r\n\r\n    // If the result contains and articles array then it is good so return articles\r\n    if (Array.isArray(data.articles)) {\r\n      return {\r\n        articles: data.articles\r\n      }\r\n    }\r\n    // Otherwise it contains an error, log and redirect to error page (status code 400)\r\n    else {\r\n      console.error(data)\r\n      if (response) {\r\n        response.statusCode = 400\r\n        response.end(data.message);\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  // componentDidUpdate is called when the page state or props re updated\r\n  // It can be over-ridden to perform other functions when an update occurs\r\n  // Here it fetches new data using this.state.newsSource as the source\r\n  async componentDidUpdate(prevProps, prevState) {\r\n\r\n    // Check if newsSource url has changed to avoid unecessary updates \r\n    if (this.state.url !== prevState.url) {\r\n\r\n      // Use api url (from state) to fetch data and call getNews()\r\n      const data = await getNews(this.state.url);\r\n\r\n      // If the result contains and articles array then it is good so update articles\r\n      if (Array.isArray(data.articles)) {\r\n        // Store articles in state\r\n        this.state.articles = data.articles;\r\n        // Force page update by changing state (make sure it happens!)\r\n        this.setState(this.state);\r\n      }\r\n      // Otherwise it contains an error, log and redirect to error page (status code 400)\r\n      else {\r\n        console.error(data)\r\n        if (response) {\r\n          response.statusCode = 400\r\n          response.end(data.message);\r\n        }\r\n      }\r\n    }\r\n  } // End componentDidUpdate\r\n\r\n\r\n\r\n} // End class\r\n\r\n\r\n\t\r\n","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"isomorphic-unfetch\");","module.exports = require(\"next/link\");","module.exports = require(\"react\");","module.exports = require(\"styled-jsx/style\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AAEA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAPA;AAQA;AACA;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AA0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;;;AAGA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAHA;AAMA;;;;AA/EA;AACA;AAiFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvFA;AACA;AAGA;AACA;AACA;AAAA;;;;;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAlBA;AAHA;AAIA;AAGA;AACA;AACA;AACA;;;AAYA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAGA;AACA;AACA;AAHA;AAAA;AAMA;AAAA;AAXA;AAAA;AAAA;AA2BA;;;;AAxDA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AAAA;;AAgBA;AACA;AACA;AACA;AACA;;;;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AALA;AAAA;AACA;AADA;AAOA;AAPA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;AAmBA;;;;;AAEA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAYA;AACA;AACA;AAFA;AAIA;AACA;AAjBA;AAsBA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AA7BA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAQA;AAEA;AACA;AACA;;;AAoBA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AALA;AAUA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAKA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVA;AA3BA;AAAA;AAAA;AAqGA;AAGA;AACA;AACA;AACA;;;AA0BA;AACA;AACA;;;;AACA;;;;;;AAGA;;;;;;AAGA;AACA;;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AACA;AACA;;;;;;AAtDA;;;;;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AADA;AACA;AAEA;;;;;AACA;AACA;AADA;AACA;;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AApLA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}